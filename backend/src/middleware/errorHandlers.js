// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢

// „Ç´„Çπ„Çø„É†„Ç®„É©„Éº„ÇØ„É©„Çπ
class AppError extends Error {
  constructor(statusCode, message) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

// ÈñãÁô∫Áí∞Â¢ÉÁî®„Ç®„É©„Éº„Éè„É≥„Éâ„É©„ÉºÔºàË©≥Á¥∞„Å™„Ç®„É©„ÉºÊÉÖÂ†±„ÇíÂê´„ÇÄÔºâ
const developmentErrorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack
  });
};

// Êú¨Áï™Áí∞Â¢ÉÁî®„Ç®„É©„Éº„Éè„É≥„Éâ„É©„ÉºÔºàÂÆâÂÖ®„Å™„Ç®„É©„ÉºÊÉÖÂ†±„ÅÆ„Åø„ÇíÂê´„ÇÄÔºâ
const productionErrorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  // ÈÅãÁî®‰∏ä„ÅÆ„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØË©≥Á¥∞„ÇíÈÄÅ‰ø°
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });
  } else {
    // „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Ç®„É©„Éº„ÇÑ‰∏çÊòé„Å™„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØË©≥Á¥∞„ÇíÈö†„Åô
    console.error('ERROR üí•', err);
    res.status(500).json({
      status: 'error',
      message: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÁµå„Å£„Å¶„Åã„Çâ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }
};

// Êú™Âá¶ÁêÜ„ÅÆ„É´„Éº„Éà„Éè„É≥„Éâ„É©„Éº
const notFoundHandler = (req, res, next) => {
  const error = new AppError(404, `${req.originalUrl} „Å®„ÅÑ„ÅÜ„É´„Éº„Éà„ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì`);
  next(error);
};

// mongoose„Ç®„É©„ÉºÂá¶ÁêÜ
const handleCastErrorDB = err => {
  const message = `ÁÑ°Âäπ„Å™ ${err.path}: ${err.value}`;
  return new AppError(400, message);
};

const handleDuplicateFieldsDB = err => {
  const value = err.errmsg.match(/(["'])(?:(?=(\\?))\2.)*?\1/)[0];
  const message = `ÈáçË§á„Åó„Åü„Éï„Ç£„Éº„É´„ÉâÂÄ§: ${value}„ÄÇÂà•„ÅÆÂÄ§„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;
  return new AppError(400, message);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `ÂÖ•Âäõ„Éá„Éº„Çø„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ${errors.join('. ')}`;
  return new AppError(400, message);
};

const handleJWTError = () => new AppError(401, 'ÁÑ°Âäπ„Å™„Éà„Éº„ÇØ„É≥„Åß„Åô„ÄÇÂÜçÂ∫¶„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');

const handleJWTExpiredError = () => new AppError(401, '„Éà„Éº„ÇØ„É≥„ÅÆÊúâÂäπÊúüÈôê„ÅåÂàá„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÂÜçÂ∫¶„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');

// „Ç®„É©„Éº„Çø„Ç§„Éó„Å´Âü∫„Å•„Åè„Ç®„É©„ÉºÂá¶ÁêÜ
const errorConverter = (err, req, res, next) => {
  let error = { ...err };
  error.message = err.message;

  if (error.name === 'CastError') error = handleCastErrorDB(error);
  if (error.code === 11000) error = handleDuplicateFieldsDB(error);
  if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
  if (error.name === 'JsonWebTokenError') error = handleJWTError();
  if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

  // Áí∞Â¢É„Å´Âøú„Åò„Åü„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„Çí‰ΩøÁî®
  if (process.env.NODE_ENV === 'development') {
    developmentErrorHandler(error, req, res, next);
  } else {
    productionErrorHandler(error, req, res, next);
  }
};

module.exports = {
  AppError,
  notFoundHandler,
  errorConverter
};
